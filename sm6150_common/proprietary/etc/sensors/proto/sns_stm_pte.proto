// @file sns_xsensor.proto
//
// Defines standard message types for Free Fall Sensor. All physical Sensor
// drivers that support Free Fall Sensor are required to support the
// event messages as defined in this file.
//
// Copyright (c) 2017 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

syntax = "proto2";
import "nanopb.proto";
import "sns_std_sensor.proto";
import "sns_physical_sensor_test.proto"; // QC - why is this needed?

// Attribute requirements:
// The Free Fall Sensor publishes:
// 1. SNS_STD_SENSOR_ATTRID_TYPE attribute value as "xsensor".
// 2. SNS_STD_SENSOR_ATTRID_RESOLUTIONS, SNS_STD_SENSOR_ATTRID_RANGES,
//    SNS_STD_SENSOR_ATTRID_RATES attributes are not applicable since this is
//    a single output sensor.
// 3. See sns_std_sensor.proto for other attributes.


// Handling stream requests:
// 1. A message with ID SNS_STD_SENSOR_MSGID_SNS_STD_ON_CHANGE_CONFIG is an
//    enable request to the free fall sensor.
// 2. A client deletes the data stream with xsensor Sensor to disable it's
//    original enable request.

// Message IDs for xsensor Sensor
enum sns_xsensor_msgid {
  option (nanopb_enumopt).long_names = false;

  // The xsensor Sensor publishes an event with this message ID
  SNS_XSENSOR_MSGID_SNS_XSENSOR_EVENT  = 775;
}

enum sns_xsensor_event_type {
  option (nanopb_enumopt).long_names = false;

  SNS_XSENSOR_EVENT_TYPE_DISABLED = 0;
  SNS_XSENSOR_EVENT_TYPE_ENABLED  = 1;
  SNS_XSENSOR_EVENT_TYPE_FIRED    = 2;
  SNS_XSENSOR_EVENT_TYPE_FIRED_2  = 3;
}

// QC - event payload is probably not necessary
// Events types from free fall Sensor
message sns_xsensor_event
{
  required sns_xsensor_event_type xsensor_event_type = 1 [default = SNS_XSENSOR_EVENT_TYPE_DISABLED];
}

